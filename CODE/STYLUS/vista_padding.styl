// -- MIXINS

MakePaddingValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-{size}{unit_name}{suffix}
    {
        padding: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }

// ~~

MakePaddingVerticalValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-vertical-{size}{unit_name}{suffix}
    {
        padding-top: size * unit_value important;
        padding-bottom: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-vertical-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding-top: size * unit_value important;
                padding-bottom: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingVerticalValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingVerticalValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }

// ~~

MakePaddingLateralValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-lateral-{size}{unit_name}{suffix}
    {
        padding-left: size * unit_value important;
        padding-right: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-lateral-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding-left: size * unit_value important;
                padding-right: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingLateralValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingLateralValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }

// ~~

MakePaddingTopValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-top-{size}{unit_name}{suffix}
    {
        padding-top: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-top-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding-top: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingTopValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingTopValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }

// ~~

MakePaddingBottomValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-bottom-{size}{unit_name}{suffix}
    {
        padding-bottom: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-bottom-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding-bottom: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingBottomValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingBottomValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }

// ~~

MakePaddingLeftValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-left-{size}{unit_name}{suffix}
    {
        padding-left: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-left-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding-left: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingLeftValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingLeftValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }

// ~~

MakePaddingRightValue( size, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    .{prefix}padding-right-{size}{unit_name}{suffix}
    {
        padding-right: size * unit_value important;
    }

    for media_query_name in media_query_name_array
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .{prefix}padding-right-{size}{unit_name}-{media_query_name}{suffix}
            {
                padding-right: size * unit_value important;
            }
        }
    }

// ~~

MakePaddingRightValueRange( start, step, count, unit_value, unit_name, media_query_name_array = {}, prefix =, suffix =, important = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakePaddingRightValue( size, unit_value, unit_name, media_query_name_array, prefix, suffix, important );
    }
