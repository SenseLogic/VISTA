// -- MIXINS

MakeOpacityAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}opacity-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                opacity: key_value important;

    .{prefix}opacity-animation{suffix}
    {
        animation-name: unquote( prefix + "opacity-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode
    }

// ~~

MakeXTranslationAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}x-translation-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                transform: translateX( key_value ) important;

    .{prefix}x-translation-animation{suffix}
    {
        animation-name: unquote( prefix + "x-translation-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode important;
    }

// ~~

MakeYTranslationAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}y-translation-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                transform: translateY( key_value ) important;

    .{prefix}y-translation-animation{suffix}
    {
        animation-name: unquote( prefix + "y-translation-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode important;
    }

// ~~

MakeScalingAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}scaling-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                transform: scale( key_value ) important;

    .{prefix}x-scaling-animation{suffix}
    {
        animation-name: unquote( prefix + "scaling-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode important;
    }

// ~~

MakeXScalingAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}x-scaling-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                transform: scaleX( key_value ) important;

    .{prefix}x-scaling-animation{suffix}
    {
        animation-name: unquote( prefix + "x-scaling-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode important;
    }

// ~~

MakeYScalingAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}y-scaling-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                transform: scaleY( key_value ) important;

    .{prefix}y-scaling-animation{suffix}
    {
        animation-name: unquote( prefix + "y-scaling-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode important;
    }

// ~~

MakeRotationAnimation( key_duration, key_time_array, key_value_array, delay = 0, duration = 1, timing_function = linear, iteration_count = 1, fill_mode = forwards, prefix =, suffix =, important = )

    key_count = length( key_time_array )

    vendors = official

    @keyframes {prefix}rotation-animation{suffix}

        for key_time, key_index in key_time_array

            key_value = key_value_array[ key_index ]
            key_time_factor = key_time / key_duration

            {100% * key_time_factor}

                transform: rotate( key_value ) important;

    .{prefix}rotation-animation{suffix}
    {
        animation-name: unquote( prefix + "rotation-animation" + suffix ) important;
        animation-delay: delay * 1s important;
        animation-duration: duration * 1s important;
        animation-timing-function: timing_function important;
        animation-iteration-count: iteration_count important;
        animation-fill-mode: fill_mode important;
    }
