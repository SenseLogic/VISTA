MakeGridFlowRow( media_query_name_list = {}, suffix = )

    .grid-flow-row{suffix}
    {
        grid-auto-flow: row;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-flow-row-{media_query_name}{suffix}
            {
                grid-auto-flow: row;
            }
        }
    }

// ~~

MakeGridFlowColumn( media_query_name_list = {}, suffix = )

    .grid-flow-column{suffix}
    {
        grid-auto-flow: column;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-flow-column-{media_query_name}{suffix}
            {
                grid-auto-flow: column;
            }

        }
    }

// ~~

MakeGridHeightsValue( size, unit_value, unit_name, media_query_name_list = {}, suffix = )

    .grid-heights-auto{suffix}
    {
        grid-auto-rows: auto;
    }

    .grid-heights-min{suffix}
    {
        grid-auto-rows: min-content;
    }

    .grid-heights-max{suffix}
    {
        grid-auto-rows: max-content;
    }

    .grid-auto-rows-{size}{unit_name}{suffix}
    {
        grid-auto-rows: size * unit_value;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-auto-rows-{size}{unit_name}-{media_query_name}{suffix}
            {
                grid-auto-rows: size * unit_value;
            }
        }
    }

// ~~

MakeGridHeightsValueRange( start, step, count, unit_value, unit_name, media_query_name_list = {}, suffix = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakeGridHeightsValue( size, unit_value, unit_name, media_query_name_list, suffix );
    }

// ~~

MakeGridWidthsValue( size, unit_value, unit_name, media_query_name_list = {}, suffix = )

    .grid-widths-auto{suffix}
    {
        grid-auto-columns: auto;
    }

    .grid-widths-min{suffix}
    {
        grid-auto-columns: min-content;
    }

    .grid-widths-max{suffix}
    {
        grid-auto-columns: max-content;
    }

    .grid-auto-columns-{size}{unit_name}{suffix}
    {
        grid-auto-columns: size * unit_value;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-auto-columns-{size}{unit_name}-{media_query_name}{suffix}
            {
                grid-auto-columns: size * unit_value;
            }
        }
    }

// ~~

MakeGridWidthsValueRange( start, step, count, unit_value, unit_name, media_query_name_list = {}, suffix = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakeGridWidthsValue( size, unit_value, unit_name, media_query_name_list, suffix );
    }

// ~~

MakeGridRowSpanValue( row_count, media_query_name_list = {}, suffix = )

    .grid-row-span-{row_count}{suffix}
    {
        grid-row: auto/span row_count;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-row-span-{row_count}-{media_query_name}{suffix}
            {
                grid-row: auto/span row_count;
            }
        }
    }

// ~~

MakeGridRowSpanValueRange( first_row_count, last_row_count, media_query_name_list = {}, suffix = )

    for row_count in first_row_count .. last_row_count
    {
        MakeGridRowSpanValue( row_count, media_query_name_list, suffix );
    }

// ~~

MakeGridColumnSpanValue( column_count, media_query_name_list = {}, suffix = )

    .grid-column-span-{column_count}{suffix}
    {
        grid-column: auto/span column_count;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-column-span-{column_count}-{media_query_name}{suffix}
            {
                grid-column: auto/span column_count;
            }
        }
    }

// ~~

MakeGridColumnSpanValueRange( first_column_count, last_column_count, media_query_name_list = {}, suffix = )

    for column_count in first_column_count .. last_column_count
    {
        MakeGridColumnSpanValue( column_count, media_query_name_list, suffix );
    }

// ~~

MakeGridRowSpanAll( media_query_name_list = {}, suffix = )

    .grid-row-span-all{suffix}
    {
        grid-row: 1/-1;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-row-span-all-{media_query_name}{suffix}
            {
                grid-row: 1/-1;
            }
        }
    }

// ~~

MakeGridColumnSpanAll( media_query_name_list = {}, suffix = )

    .grid-column-span-all{suffix}
    {
        grid-column: 1/-1;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-column-span-all-{media_query_name}{suffix}
            {
                grid-column: 1/-1;
            }
        }
    }

// ~~

MakeGridRowGapValue( size, unit_value, unit_name, media_query_name_list = {}, suffix = )

    .grid-row-gap-{size}{unit_name}{suffix}
    {
        grid-row-gap: size * unit_value;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-row-gap-{size}{unit_name}-{media_query_name}{suffix}
            {
                grid-row-gap: size * unit_value;
            }
        }
    }

// ~~

MakeGridRowGapValueRange( start, step, count, unit_value, unit_name, media_query_name_list = {}, suffix = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakeGridRowGapValue( size, unit_value, unit_name, media_query_name_list, suffix );
    }

// ~~

MakeGridColumnGapValue( size, unit_value, unit_name, media_query_name_list = {}, suffix = )

    .grid-column-gap-{size}{unit_name}{suffix}
    {
        grid-column-gap: size * unit_value;
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-column-gap-{size}{unit_name}-{media_query_name}{suffix}
            {
                grid-column-gap: size * unit_value;
            }
        }
    }

// ~~

MakeGridColumnGapValueRange( start, step, count, unit_value, unit_name, media_query_name_list = {}, suffix = )

    for index in 0 .. count - 1
    {
        size = start + index * step;

        MakeGridColumnGapValue( size, unit_value, unit_name, media_query_name_list, suffix );
    }

// ~~

MakeGridColumnsValue( column_count, media_query_name_list = {}, suffix = )

    .grid-columns-{column_count}{suffix}
    {
        -ms-grid-columns: ( 1fr )[ column_count ];
        grid-template-columns: repeat( column_count, 1fr );
    }

    for media_query_name in media_query_name_list
    {
        @media MediaQueryMap[ media_query_name ]
        {
            .grid-columns-{column_count}-{media_query_name}{suffix}
            {
                -ms-grid-columns: ( 1fr )[ column_count ];
                grid-template-columns: repeat( column_count, 1fr );
            }
        }
    }

// ~~

MakeGridColumnsValueRange( first_column_count, last_column_count, media_query_name_list = {}, suffix = )

    for column_count in first_column_count .. last_column_count
    {
        MakeGridColumnsValue( column_count, media_query_name_list, suffix );
    }
